---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"kbd"> {
  shortcut: string;
  windows?: string;
  macos?: string;
}

const props = Astro.props;

// convert `Ctrl + Shift + A` into `Ctrl Shift A`
function normalizeCombination(input: string): string {
  // split by any number of optional spaces around a +
  let keys = input.split(/\s*\+\s*/);
  // delete any empty strings
  keys = keys.filter((k) => k !== "");
  // convert keys to title case (single-letter keys are capitalized)
  keys = keys.map((k) => `${k.charAt(0).toUpperCase()}${k.slice(1).toLowerCase()}`);

  // and join with spaces
  return [...keys].join(" ");
}

const attr = [["data-keys", normalizeCombination(props.shortcut)]];
if (props.windows) {
  attr.push(["data-keys-windows", normalizeCombination(props.windows)]);
}
if (props.macos) {
  attr.push(["data-keys-macos", normalizeCombination(props.macos)]);
}
const attrs = Object.fromEntries(attr);
---

<keyboard-shortcut {...attrs} class:list={["inline-flex items-center", props.class]}></keyboard-shortcut>

<script>
  import invariant from "tiny-invariant";

  class KeyboardShortcut extends HTMLElement {
    connectedCallback() {
      const userAgent = window.navigator.userAgent;
      let os: "Windows" | "Macos" | "Other";
      if (/Windows NT/.test(userAgent)) {
        os = "Windows";
      } else if (/Macintosh|MacIntel|MacPPC|Mac68K|iPhone|iPad|iPod/.test(userAgent)) {
        // match iPhone/iPad/iPod because if a viewer is on an Apple device
        // they're probably familiar with MacOS keyboard shortcuts
        os = "Macos";
      } else {
        os = "Other";
      }

      const keys = this.dataset.keys;
      invariant(keys, "must be provided via `data-keys`");
      let platformKeys = this.dataset[`keys${os}`];

      const keymap: Record<string, string> = {
        enter: "Enter ↵",
        tab: "Tab ⇥",
        space: "Space ␣",
        escape: "⎋ Esc",
        win: "⊞ Win",
        command: "⌘",
        cmd: "⌘",
        shift: "⇧",
        ctrl: "⌃",
        control: "⌃",
        option: "⌥",
        alt: "⌥",
        delete: "⌫",
        backspace: "⌫",
        up: "↑",
        right: "→",
        down: "↓",
        left: "←",
        plus: "+",
      };
      const keystrokes = (platformKeys ?? keys).split(" ").map((k) => keymap[k.toLowerCase()] ?? k);

      for (const [i, key] of keystrokes.entries()) {
        const elem = document.createElement("kbd");
        elem.innerText = key;
        this.append(elem);
        if (i < keystrokes.length - 1) {
          const elem = document.createElement("span");
          elem.innerText = "+";
          elem.className = "mx-1";
          this.append(elem);
        }
      }
    }
  }

  customElements.define("keyboard-shortcut", KeyboardShortcut);
</script>

<!-- 
const KeyboardShortcut: React.FC<KeyboardShortcutProps> = ({
  shortcut,
  macosShortcut,
  className,
}) => {
  const [displayShortcut, setDisplayShortcut] = useState(shortcut);

  useEffect(() => {
    // OS detection should run only on the client-side
    const isMacUser = navigator.platform.toUpperCase().indexOf("MAC") >= 0;

    if (isMacUser) {
      if (macosShortcut) {
        setDisplayShortcut(macosShortcut);
      } else {
        // Convert common Windows/Linux keys to macOS equivalents
        let convertedShortcut = shortcut;
        convertedShortcut = convertedShortcut.replace(/Ctrl\s*\+\s*/gi, "⌘ + ");
        convertedShortcut = convertedShortcut.replace(/Alt\s*\+\s*/gi, "⌥ + ");
        convertedShortcut = convertedShortcut.replace(/Cmd\s*\+\s*/gi, "⌘ + "); // In case Cmd was used in the base shortcut
        convertedShortcut = convertedShortcut.replace(/Option\s*\+\s*/gi, "⌥ + "); // In case Option was used
        // Replace individual keys if not part of a combo already handled
        convertedShortcut = convertedShortcut.replace(/(?<!⌘ )Ctrl/gi, "⌘");
        convertedShortcut = convertedShortcut.replace(/(?<!⌥ )Alt/gi, "⌥");
        setDisplayShortcut(convertedShortcut);
      }
    } else {
      // For non-Mac users, display the original shortcut or Windows/Linux specific if ever needed
      setDisplayShortcut(shortcut);
    }
  }, [shortcut, macosShortcut]);

  const keys = displayShortcut.split(/\s*\+\s*/);

  return (
    
  );
}; -->
