---
import type { HTMLAttributes } from "astro/types";
import ExternalLinkIcon from "@lucide/astro/icons/external-link";
import { join as joinPath } from "node:path/posix";

export interface Props extends HTMLAttributes<"a"> {
  href: string;
  external?: boolean;
  noEndorse?: boolean;
  noExternalIcon?: boolean;
}

const { external = false, noEndorse = false, noExternalIcon = false, href, class: cn, ...props } = Astro.props;

function getIsExternal(): boolean {
  try {
    new URL(href);
    return true;
  } catch {
    return false;
  }
}

const isExternal = external || getIsExternal();

const relProps: { rel?: string; target?: string } = {};
if (isExternal) {
  relProps.rel = [
    // search engines: link is external • https://microformats.org/wiki/rel-external
    "external",
    // search engines: should not be afforded additional weight or ranking • https://microformats.org/wiki/rel-nofollow
    noEndorse ? "nofollow" : "",
    // prevent linked page from modifying original page • https://mathiasbynens.github.io/rel-noopener
    "noopener",
    // leak no referrer information • https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel/noreferrer
    "noreferrer",
  ]
    .filter((rel) => rel !== "")
    .join(" ");
  relProps.target = "_blank";
}

let path = isExternal ? href : new URL(joinPath(import.meta.env.BASE_URL, href), Astro.url).pathname;
// remove trailing slashes
if (path.endsWith("/")) path = path.slice(0, -1);
---

<a {...relProps} {...props} href={path} class:list={[cn, isExternal && "inline-flex items-center"]}>
  <slot />{isExternal && !noExternalIcon && <ExternalLinkIcon class="size-4 p-0.5 text-gray-700/80" />}
</a>
